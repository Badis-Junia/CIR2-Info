1)

~        │./main.cpp: In constructor ‘B::B(const A&, int)’:                                                                                                                        │
~        │./main.cpp:32:13: warning: implicitly-declared ‘constexpr A& A::operator=(const A&)’ is deprecated [-Wdeprecated-copy]                                                   │
~        │   32 |         a = pa;                                                                                                                                                  │
~        │      |             ^~                                                                                                                                                   │
~        │./main.cpp:16:5: note: because ‘A’ has user-provided ‘A::A(const A&)’                                                                                                    │
~        │   16 |     A(const A& pa) {                                                                                                                                             │
~        │      |     ^                                                                                                                                                            │
~        │./main.cpp: In function ‘int main()’:                                                                                                                                    │
~        │./main.cpp:70:10: warning: implicitly-declared ‘constexpr A& A::operator=(const A&)’ is deprecated [-Wdeprecated-copy]                                                   │
~        │   70 |     a3 = a1; cout << endl;                                                                                                                                       │
~        │      |          ^~                                                                                                                                                      │
~        │./main.cpp:16:5: note: because ‘A’ has user-provided ‘A::A(const A&)’                                                                                                    │
~        │   16 |     A(const A& pa) {                                                                                                                                             │
~        │      |     ^                                                                                                                                                            │
~        │                                                                                                                                                                         │
~        │-- A --                                                                                                                                                                  │
~        │1                                                                                                                                                                        │
~        │2                                                                                                                                                                        │
~        │3                                                                                                                                                                        │
~        │3                                                                                                                                                                        │
~        │                                                                                                                                                                         │
~        │-- B --                                                                                                                                                                  │
~        │15                                                                                                                                                                       │
~        │34                                                                                                                                                                       │
~        │134                                                                                                                                                                      │
~        │-- C --                                                                                                                                                                  │
~        │13416                                                                                                                                                                    │
~        │33417                                                                                                                                                                    │
~        │328                                                                                                                                                                      │
~        │                                                                                                                                                                         │


2)
// TOUS les "cout << endl;" servent à faire un retour à la ligne, je vais donc les enlever pour plus de facilités
int main() {
    cout << "-- A --\n"; // affiche "-- A --"
    A a0;  // création de l'objet a0 de la classe A, ça va s'afficher ensuite
    A a1(3); //création de l'objet a1 en utilisant le deuxième constructeur qui prend en paramètre un entier, on affichera 2
    A a2(a1); //même chose mais on prend en paramètre un objet, on affichera 3
    A a3 = a2; // on fait une égalité entre les objets a2 et l'objet a3 qu'on vient de créer, on affichera 3 pour la création de l'objet a3
    a3 = a1; // égalité entre l'objet a3 et a1

    cout << "-- B --\n"; "-- A --\n"; // affiche "-- A --"
    B b0(a0, 3); // constructeur de B0 avec deux paramètres, le premier un objet de la classe A et le deuxième, un entier. Comme on crée un objet en utilisant le premier constructeur avec A, on affiche 1 puis 5 pour le cout dans le constructeur de l'objet b
    B b1(a1);  // création d'objet avec le premier constructeur de la classe B qui prend en paramètre un objet A qui est crée avec le troisième constructeur de la classe A, on affichera alors 1 pour la création de l'objet via le premier constructeur qui ira en paramètre pour la création de l'objet en utilisant le troisième constructeur (on affichera alors 3) puis on affichera 4 pour l'affichage avec le premier constructeur de la classe B
    B b2; // on crée un objet b2 avec le constructeur par défaut qui n'est pas dans le code (par défaut, le compilateur crée un constructeur sans arguments, sauf s'il a déjà été crée, donc celui sans arguments). Comme ça a été crée par défaut et qu'il n'est pas dans le code, il n'y a alors aucune instruction à l'intérieur

    cout << "-- C --\n";
    C c0; // On appelle le constructeur C, donc il faut construire B avec son constructeur par défaut, ce qui va afficher 1 comme a() affiche 1, on a le constructeur a(const a&) pour avoir a dans b, soit on affiche 3, comme on a l'affichage du constructeur de B, on a 4. On revient dans C, l'affichage 6, soit on a la création de A donc on affiche 1 et et 6
    C c1(a1); // on appelle le constructeur C(a pa) : b(pa) donc b est construit, soit on affiche 3 comme on utilise le premier constructeur de la classe puis 4 pour l'affichage de B puis dans C, on crée A soit on affiche 1 et dans C, on a l'affichage de 7
    C c2(b2); // on appelle le constructeur c(const b& pb), donc rien pour l'instant. On initialise A, soit on affiche 3 comme on utilise le troisième constructeur de 1, puis on utilise son deuxième constructeur A comme le troisième l'utilise, soit on affiche 2 puis tout ça dans C, on affiche 8
}


